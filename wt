#!/bin/bash
# git worktree management

set -e

# Version information
WT_VERSION="0.0.0-beta"

# Get current directory name (e.g., ws.wakumo.ai)
DIR_NAME=$(basename "$(pwd)")

# Default worktree directory
TMP_DIR="${HOME}/.wt/worktrees"

case "$1" in
    add)
        if [ -z "$2" ]; then
            echo "Usage: $0 add <name>"
            exit 1
        fi

        NAME="$2"
        # Sanitize branch name for directory use (replace / and other invalid chars with _)
        SAFE_NAME=$(echo "$NAME" | sed 's/[\/\\:*?"<>|]/_/g')
        WORKTREE_DIR="${TMP_DIR}/${DIR_NAME}-${SAFE_NAME}"

        # Create .wt directory and .gitignore if they don't exist
        if [ ! -d ".wt" ]; then
            mkdir -p .wt
            echo "worktrees" >> .wt/.gitignore
            echo "*.local" >> .wt/.gitignore
        fi

        # Create .wt/setup template if it doesn't exist
        if [ ! -f ".wt/setup" ]; then
            cat > .wt/setup << 'EOF'
#! /bin/bash
# $ROOT_WORKTREE_PATH is path to the base repository (source tree)
if [ -f .wt/setup.local ]; then
  source .wt/setup.local
fi
EOF
        fi

        mkdir -p .wt/worktrees

        # Check if worktree already exists
        if git worktree list --porcelain | grep -q "worktree $WORKTREE_DIR"; then
            echo "Worktree already exists at $WORKTREE_DIR"
            exit 1
        fi

        # Check if branch exists
        if git branch --list "$NAME" | grep -q "$NAME"; then
            echo "Branch '$NAME' already exists. Adding worktree without -b flag."
            git worktree add "$WORKTREE_DIR" "$NAME"
        else
            echo "Creating new branch '$NAME' and adding worktree."
            git worktree add "$WORKTREE_DIR" -b "$NAME"
        fi

        # Create symlink in .wt/worktrees directory
        SYMLINK_PATH=".wt/worktrees/${SAFE_NAME}"
        if [ -e "$SYMLINK_PATH" ]; then
            echo "Symlink already exists at $SYMLINK_PATH"
            exit 1
        fi

        ln -s "$WORKTREE_DIR" "$SYMLINK_PATH"
        echo "Created worktree at $WORKTREE_DIR"
        echo "Created symlink $SYMLINK_PATH -> $WORKTREE_DIR"

        # Copy setup script to worktree if it exists in project
        if [ -f ".wt/setup" ]; then
            mkdir -p "$WORKTREE_DIR/.wt"
            cp ".wt/setup" "$WORKTREE_DIR/.wt/setup"
            chmod +x "$WORKTREE_DIR/.wt/setup"

            echo "Running setup script..."
            ROOT_WORKTREE_PATH="$(pwd)" bash "$WORKTREE_DIR/.wt/setup"
            echo "Setup script completed"
        fi
        ;;
    remove|rm)
        FORCE_FLAG=""
        NAME=""
        
        # Parse arguments
        while [ $# -gt 1 ]; do
            case "$2" in
                -f|--force)
                    FORCE_FLAG="-f"
                    shift
                    ;;
                *)
                    if [ -z "$NAME" ]; then
                        NAME="$2"
                    fi
                    shift
                    ;;
            esac
        done

        if [ -z "$NAME" ]; then
            echo "Usage: $0 remove [-f|--force] <name>"
            exit 1
        fi

        # Sanitize branch name for directory use (replace / and other invalid chars with _)
        SAFE_NAME=$(echo "$NAME" | sed 's/[\/\\:*?"<>|]/_/g')
        SYMLINK_PATH=".wt/worktrees/${SAFE_NAME}"

        if [ ! -e "$SYMLINK_PATH" ]; then
            echo "Worktree '$NAME' not found at $SYMLINK_PATH"
            exit 1
        fi

        # Get actual worktree path
        ACTUAL_WORKTREE_DIR=$(readlink -f "$SYMLINK_PATH")

        # Remove worktree using git
        echo "Removing worktree at $ACTUAL_WORKTREE_DIR"
        if [ -n "$FORCE_FLAG" ]; then
            git worktree remove -f "$ACTUAL_WORKTREE_DIR" || echo "Note: Worktree may have already been removed"
        else
            git worktree remove "$ACTUAL_WORKTREE_DIR" || echo "Note: Worktree may have already been removed"
        fi
        # when the worktree is removed, the symlink is also removed
        if [ -e "$ACTUAL_WORKTREE_DIR" ]; then
            echo "Worktree still exists at $ACTUAL_WORKTREE_DIR"
            echo "Worktree not removed"
            exit 1
        fi
        if [ -e "$SYMLINK_PATH" ]; then
            rm "$SYMLINK_PATH" || echo "Note: Symlink may have already been removed"
            echo "Removed symlink $SYMLINK_PATH"
        fi
        echo "Worktree removed successfully"
        ;;
    list)
        git worktree list
        ;;
    go)
        if [ -z "$2" ]; then
            echo "Usage: $0 go <name>"
            exit 1
        fi

        NAME="$2"
        # Sanitize branch name for directory use (replace / and other invalid chars with _)
        SAFE_NAME=$(echo "$NAME" | sed 's/[\/\\:*?"<>|]/_/g')
        WORKTREE_DIR="${TMP_DIR}/${DIR_NAME}-${SAFE_NAME}"
        SYMLINK_PATH=".wt/worktrees/${SAFE_NAME}"

        # Create .wt directory and .gitignore if they don't exist
        if [ ! -d ".wt" ]; then
            mkdir -p .wt
            echo "worktrees" > .wt/.gitignore
            echo "*.local" > .wt/.gitignore
        fi

        # Create .wt/setup template if it doesn't exist
        if [ ! -f ".wt/setup" ]; then
            cat > .wt/setup << 'EOF'
#! /bin/bash
# wt - Git Worktree Management Tool
# https://github.com/tumf/wt
# $ROOT_WORKTREE_PATH is path to the base repository (source tree)
EOF
        fi

        mkdir -p .wt/worktrees

        # Check if worktree already exists
        if git worktree list --porcelain | grep -q "worktree $WORKTREE_DIR"; then
            echo "Worktree '$NAME' exists, navigating to it"
        else
            echo "Worktree '$NAME' does not exist, creating it first"

            # Check if branch exists
            if git branch --list "$NAME" | grep -q "$NAME"; then
                echo "Branch '$NAME' already exists. Adding worktree without -b flag."
                git worktree add "$WORKTREE_DIR" "$NAME"
            else
                echo "Creating new branch '$NAME' and adding worktree."
                git worktree add "$WORKTREE_DIR" -b "$NAME"
            fi

            # Create symlink in .wt/worktrees directory
            if [ -e "$SYMLINK_PATH" ]; then
                echo "Symlink already exists at $SYMLINK_PATH"
                exit 1
            fi

            ln -s "$WORKTREE_DIR" "$SYMLINK_PATH"
            echo "Created worktree at $WORKTREE_DIR"
            echo "Created symlink $SYMLINK_PATH -> $WORKTREE_DIR"

            # Copy setup script to worktree if it exists in project
            if [ -f ".wt/setup" ]; then
                mkdir -p "$WORKTREE_DIR/.wt"
                cp ".wt/setup" "$WORKTREE_DIR/.wt/setup"
                chmod +x "$WORKTREE_DIR/.wt/setup"

                echo "Running setup script..."
                ROOT_WORKTREE_PATH="$(pwd)" bash "$WORKTREE_DIR/.wt/setup"
                echo "Setup script completed"
            fi
        fi

        # Change to worktree directory
        echo "Changing to worktree directory: $WORKTREE_DIR"
        cd "$WORKTREE_DIR" && $SHELL
        ;;
    version|--version|-v)
        echo "wt version $WT_VERSION"
        ;;
    ""|*)
        # No subcommand provided, default to list
        git worktree list
        ;;
esac
